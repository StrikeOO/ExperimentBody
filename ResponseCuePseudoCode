//around line 32
	m_response_cue = addObject(new CImagePlane("images/response_cue.tga"));
	m_response_cue->enableTrasparency(true);
	m_response_cue->pxSetSize(m_paramsFile->getInteger(CFG_CUE_SIZE),m_paramsFile->getInteger(CFG_CUE_SIZE));
	m_response_cue->pxSetPosition(0,0);
	m_response_cue->hide();





//THIS ONE IS ALMOST COMPLETELY UNEDITED
// STATE_TARGET: present the target
	//              go to the next state and wait for subject response
	//THINGS TO CHANGE: we need to targets.  we need a variable for target orientation.  we need an occluder of different sizes
	//to put in front of the image.  we need two options for the location of each bar.  we need to keep track of where it is.
	case STATE_TARGET:
			
			//CEnvironment::Instance()->outputMessage("State Target");
			// continue to stabilize the fixation marker;
		
			//question
			m_fixation->pxSetPosition(X,Y);
			m_fixation->show();
			if (debug==1)
			{
				X = 0;
				Y = 0;
			}

			if (m_timerisi.isExpired() && (gate==0))
			{
		    SHOW_TARGET = 1;
			m_target->pxSetPosition(X+XTargetOffset, Y);
			m_target->show();	
			TimeTargetON = m_timerExp.getTime();
			// set target duration
			m_timertarget.start(m_paramsFile->getInteger(CFG_TARGET_TIME));
			//NEED TO LOOK AT TARGET THE ENTIRE TIME SO GATE = 0? WHAT DOES GATE MEAN?
				gate = 1;
			}
			if ((gate==1) && (m_timertarget.isExpired()))
			{ // go to the next state
			
			m_state = STATE_RESPONSE_CUE;
			m_target->hide();
			//CEnvironment::Instance()->outputMessage("State Response Cue");
			
			}
			//If timer isn't expired, continue to show the target
			else if ((gate==1) && (!m_timertarget.isExpired()))
			{
			m_fixation->pxSetPosition(X,Y);
			m_fixation->show();			
			m_target->pxSetPosition(X+XTargetOffset, Y);
			m_target->show();
			}

	
	break;






case RESPONSE_CUE:

  //check if the subject is looking at the fixation and that there is a drift (no saccades or notrack)
  if (((gate==0) && 
			!CTriggers::any(Samples->triggers, Samples->samplesNumber, EOS_TRIG_1_BADDATA) &&
			!CTriggers::any(Samples->triggers, Samples->samplesNumber, EOS_TRIG_1_EMEVENT) && (m_timerfixation.isExpired()))
		    ||
			((debug==1) && (gate==0)))
		{

			if (debug==1)
			{
				X = 0;
			    Y = 0;
			}
			// show the cue at fixation and hide the fixation point (don't hide fixation)
			//m_fixation->hide();
			//records when fixation breaks
			TimeFixationOFF = m_timerExp.getTime();
      
      
      //if invalid trial and cue was to the left
      else if (TrialType == 0 && CueDirection == -1) {
          //show the response cue to the right.  We'll want to change the color though, so probably upload a new cue image around line 30
          ResponseCueDirection == 1
          m_response_cue->pxSetPosition(X,Y);
          m_response_cue->show();
      }
      //if invalid trial and cue was to the right
      else if (TrialType == 1 && CueDirection == 1) {
        //show response cue to the left
          ResponseCueDirection == -1
          m_response_cue->pxSetPosition(X,Y);
          m_response_cue->show();
      }
      //if valid trial and Cue was to the left
      if (TrialType == 1 && CueDirection == -1) {
          //show the response cue to the left.  We'll want to change the color though, so probably upload a new cue image around line 30
          ResponseCueDirection == -1
          m_response_cue->pxSetPosition(X,Y);
          m_response_cue->show();
      }
      //if valid trial and cue was to the right
      else if (TrialType == 1 && CueDirection == 1) {
          ResponseCueDirection == 1
          m_response_cue->pxSetPosition(X,Y);
          m_response_cue->show();
      }
      else if (TrialType == 2) {
          //use a random number generator
          ResponseCueDirection == 1 or -1;
          m_response_cue --> pxSetPosition(X,Y);
          m_response_cue->show();
      }
      // time for cue presentation
			TimeCueON = m_timerExp.getTime();

			gate = 1;
			// set the time for the cue 
			m_timercue.start(m_paramsFile->getInteger(CFG_CUE_TIME));

		}
      
      if ((!m_timercue.isExpired()) && (gate==1))
		{
			// continue to stabilize the cue
			if(debug==1)
			{
				X = 0;
				Y = 0;
			}
      
            //if invalid trial and cue was to the left
      else if (TrialType == 0 && CueDirection == -1) {
          //show the response cue to the right.  We'll want to change the color though, so probably upload a new cue image around line 30
          ResponseCueDirection == 1
          m_response_cue->pxSetPosition(X,Y);
          m_response_cue->show();
      }
      //if invalid trial and cue was to the right
      else if (TrialType == 1 && CueDirection == 1) {
        //show response cue to the left
          ResponseCueDirection == -1
          m_response_cue->pxSetPosition(X,Y);
          m_response_cue->show();
      }
      //if valid trial and Cue was to the left
      if (TrialType == 1 && CueDirection == -1) {
          //show the response cue to the left.  We'll want to change the color though, so probably upload a new cue image around line 30
          ResponseCueDirection == -1
          m_response_cue->pxSetPosition(X,Y);
          m_response_cue->show();
      }
      //if valid trial and cue was to the right
      else if (TrialType == 1 && CueDirection == 1) {
          ResponseCueDirection == 1
          m_response_cue->pxSetPosition(X,Y);
          m_response_cue->show();
      }
      else if (TrialType == 2) {
          //use a random number generator
          ResponseCueDirection == 1 or -1;
          m_response_cue --> pxSetPosition(X,Y);
          m_response_cue->show();
      }
  }
  // when the time for the cue is over go to the next state 
		else if ((m_timercue.isExpired()) && (gate==1))
		{

			//if trial is NOT type three (not catch_ then STATE = target ad reinstate fixation cue
			//WE WILL BE KEEPING THE FIXATION CUE THE WHOLE TIME, SO THIS IS UNECESSARY
			if (!(TrialType == 3))
			{
			
			m_state = STATE_RESPONSE;
			m_fixation->pxSetPosition(X,Y);
			m_fixation->show();
      
			
	m_response_cue->hide();
			gate = 0;
			//get the time when the cue disappears
			TimeResponseCueOFF = m_timerExp.getTime();
			}
			m_timerhold.start(m_paramsFile->getInteger(CFG_HOLD_TIME));
			m_state = STATE_RESPONSE;
			WAIT_RESPONSE = 0;
			m_cue->hide();
			m_neutralcue->hide();
			m_fixation->pxSetPosition(X,Y);
			m_fixation->show();
			TimeCueOFF = m_timerExp.getTime();
		
		}

		break;

      
      
      
      
      
      
      
      
      
      
      
      
      void ExperimentBody::gotoFixation() 
{
	
	SHOW_TARGET = 0;
	if (!(TestCalibration==1))
	CEnvironment::Instance()->outputMessage("Trial Number: %d", (TrialNumber));


	hideAllObjects();
	
	if (TestCalibration == 1)
	{
			m_state = STATE_TESTCALIBRATION;
			//CEnvironment::Instance()->outputMessage("Calibration trial");
			ResponseFinalize = 0;
			m_timerCheck.start(500);
	}
	else
	{
		    m_state = STATE_FIXATION;
			gate = 1;
			// show the box at the center of the screen
			//m_box->show();
	
	
	
	
		// if trial is a catch trial target does not appear
		TrialType = TrialTypeList[m_curStim+1];
		CueDirection = CueDirectionList[m_curStim+1];
    //Make sure that Target time doesn't change?
		CueTargetTime = CueTargetTimingList[m_curStim+1];
		// valid trial
		if (TrialType == 1) 
		{
	      NumberValidTrials++;
		//SET CUE ANGLE?
		if (CueDirection==-1)
		{
		CEnvironment::Instance()->outputMessage("Valid trial - cue direction to the left ");
		// note: the cue originally points to the left, when the cue points right, it need to be rotated
		m_cue->degSetAngle(0);
    m_response_cue->degSetAngle(0);
		}
		if (CueDirection==1)
		{
		CEnvironment::Instance()->outputMessage("Valid trial - cue direction to the right ");
		m_cue->degSetAngle(180);
    m_response_cue->degSetAngle(180);
		}		
		XTargetOffset = XTargetOffset * CueDirection;		
		}
		// invalid trial
		else if (TrialType == 0)
		{
		NumberInvalidTrials++;
		if (CueDirection==-1)
		{
		CEnvironment::Instance()->outputMessage("Invalid trial - cue direction to the left ");
		m_cue->degSetAngle(0);
    m_response_cue->degSetAngle(180);
		}
		if (CueDirection==1)
		{
		CEnvironment::Instance()->outputMessage("Invalid trial - cue direction to the right ");
		m_cue->degSetAngle(180);
    m_response_cue->degSetAngle(0);
		}
		
		XTargetOffset = XTargetOffset * -CueDirection;	
	
		}
		// neutral trials (a neutral cue is shown)
		// target to the right and left??? what does this mean
		//PROBABLY HAVE TO CHANGE THIS A BIT
    //randomly generate the direction of the neutral response cue
		else if (TrialType == 2)
		{
	    NumberNeutralTrials++;
		if (CueDirection==-1)
		{
		CEnvironment::Instance()->outputMessage("Neutral trial - target to the right ");
		m_cue->degSetAngle(0);
		}
		if (CueDirection==1)
		{
		CEnvironment::Instance()->outputMessage("Neutral trial - target to the left");
		m_cue->degSetAngle(180);
		}
		
		XTargetOffset = XTargetOffset * -CueDirection;	
		}
		// catch trial (no target appears)
		else if (TrialType == 3)
		{
		if (CueDirection==-1)
		{
		CEnvironment::Instance()->outputMessage("Catch trial - cue direction to the left ");
		m_cue->degSetAngle(0);
		}
		if (CueDirection==1)
		{
		CEnvironment::Instance()->outputMessage("Catch trial - cue direction to the right ");
		m_cue->degSetAngle(180);
		}
		if (CueDirection==3)
		{
		CEnvironment::Instance()->outputMessage("Catch trial - cue direction neutral ");
		}
		}
	
		}

